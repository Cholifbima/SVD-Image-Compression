name: Deploy to Azure Web App

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  AZURE_WEBAPP_NAME: svdimagecompression-ebcvbqhzbsgfhzdz
  PYTHON_VERSION: '3.11'

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Test imports
      run: |
        cd src/app
        python -c "
        import sys
        sys.path.append('..')
        from svd import compress_image
        from utils import allowed_file
        print('✅ All imports working')
        "

    - name: Deploy using FTP from publish profile
      env:
        PUBLISH_PROFILE: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
      run: |
        # Install lftp for FTP deployment
        sudo apt-get update && sudo apt-get install -y lftp
        
        # Parse publish profile for FTP credentials
        echo "$PUBLISH_PROFILE" > publishProfile.xml
        
        # Extract FTP details (look for the first FTP publish method)
        FTP_HOST=$(grep -o 'publishUrl="ftp://[^"]*"' publishProfile.xml | head -1 | sed 's/publishUrl="ftp:\/\///;s/"//')
        FTP_USER=$(grep -o 'userName="[^"]*"' publishProfile.xml | head -1 | sed 's/userName="//;s/"//')
        FTP_PASS=$(grep -o 'userPWD="[^"]*"' publishProfile.xml | head -1 | sed 's/userPWD="//;s/"//')
        
        echo "FTP Host: $FTP_HOST"
        echo "FTP User: $FTP_USER"
        echo "Password length: ${#FTP_PASS}"
        
        # Create deployment script
        cat > deploy_ftp.sh << 'EOF'
        #!/bin/bash
        set -e
        
        # Clean up target directory and upload files
        lftp -c "
        set ssl:verify-certificate no;
        set ftp:ssl-allow no;
        open -u $FTP_USER,$FTP_PASS $FTP_HOST;
        cd /site/wwwroot;
        mirror --reverse --delete --verbose . .;
        quit;
        "
        EOF
        
        chmod +x deploy_ftp.sh
        
        # Execute FTP deployment
        FTP_HOST=$FTP_HOST FTP_USER=$FTP_USER FTP_PASS=$FTP_PASS ./deploy_ftp.sh
        
        echo "✅ FTP deployment completed!"

    - name: Wait and verify deployment
      run: |
        echo "Waiting for app to start..."
        sleep 45
        
        # Test the deployment
        for i in {1..5}; do
          echo "Attempt $i: Testing app..."
          if curl -s --max-time 30 "https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net/health"; then
            echo "✅ App is responding!"
            break
          else
            echo "⏳ App not ready yet, waiting..."
            sleep 30
          fi
        done

    - name: Deployment info
      run: |
        echo "🎉 Deployment process completed!"
        echo "🌐 App URL: https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net"
        echo "🔍 Debug URL: https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net/debug"
        echo "💚 Health URL: https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net/health"
        echo ""
        echo "⚠️  If app shows default Azure page:"
        echo "1. Wait 3-5 minutes for full startup"
        echo "2. Check the /debug endpoint for diagnostic info"
        echo "3. Azure logs at: https://portal.azure.com" 